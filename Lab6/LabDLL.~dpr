Library LabDLL;
Uses Forms,sysutils,classes,math,Dialogs,UnitMain in 'UnitMain.pas';

(*
Функция ShowForm показывает форму frmMain
из модуля UnitMain  в модальном режиме.
Возвращает результат модального запуска.
*)
function ShowForm: Integer; stdcall;
begin
frmMain := TfrmMain.Create(Application);
Result := frmMain.ShowModal;
frmMain.Free;
end;

(*
 Функция CalcW рассчитывает и возвращает значение $w$.
Параметры:
x,y,z:Double-параметры расчета w
*)
function CalcW(x,y,z:Double):Double;
begin
  CalcW:=Power(Abs(cos(x)-cos(y)),1+2*sqr(sin(y)))*
    (1+z+sqr(z)/2+z*sqr(z)/3+sqr(z)*sqr(z)/4);
end;

(*
Процедура Output выводит рассчитаное значение $w$ на форму.
Параметры:
w   : Double - значение функции
*)
procedure Output(w:Double);
begin
  with frmMain do begin
    memResult.Text:=memResult.Text+FloatToStr(w)+#13#10+'w=';
    memResult.SelLength:=length(memResult.Text);
  end;
end;

(*
Функция Input - получает значения параметров и возвращает True,
если операция прошла успешно, иначе возвращает False.
Параметры:
x,y,z:Double-параметры расчёта значения функции
Локальные переменные функции ввода параметров рассчета
errors:String-список ошибок ввода вывода
*)
function Input(var x,y,z:Double):boolean;
var errors:string;
begin
  with frmMain do begin
  errors:='';
  if not TryStrToFloat(edtX.Text,x) then
    errors:=#10#13+'x - не вещественное число!';
  if not TryStrToFloat(edtY.Text,y) then
    errors:=errors+#10#13+'y - не вещественное число!';
  if not TryStrToFloat(edtZ.Text,z) then
    errors:=errors+#10#13+'z - не вещественное число!';
  if (errors<>'') then begin
	  Input:=False;MessageDlg('Ошибки: '+errors,mtError,[mbOK],0)
  end else Input:=True;
  end;
end;

exports  CalcW,Input,Output,ShowForm;
begin

end.

